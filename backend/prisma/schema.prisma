// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthRole {
  USER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  userId    String   @db.Uuid
  expiresAt DateTime @db.Timestamptz
  issuedAt  DateTime @default(now()) @db.Timestamptz
  revokedAt DateTime? @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(uuid()) @db.Uuid
  name           String?          @db.VarChar(255)
  email          String?          @unique @db.VarChar(255)
  emailVerified  DateTime?        @db.Timestamptz
  image          String?
  role           AuthRole         @default(USER)
  createdAt      DateTime         @default(now())
  username       String?          @unique @db.VarChar(255)
  password       String?          @db.VarChar(255)
  hashedPassword String?          @db.VarChar(255)
  accounts       Account[]
  gameStatus     UserGameStatus[]
  refreshTokens  RefreshToken[]   // Added this relation
  userGames      UserGame[]       // Added this relation
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Game {
  id           Int        @id @default(autoincrement())
  name         String
  steamAppId   String?    @unique
  imageUrl     String?
  createdAt    DateTime   @default(now()) @db.Timestamptz
  updatedAt    DateTime   @default(now()) @db.Timestamptz
  userGames    UserGame[]
  gameStatuses UserGameStatus[]
}

model UserGame {
  id              Int       @id @default(autoincrement())
  userId          String    @db.Uuid
  gameId          Int
  playtimeMinutes Int       @default(0)
  lastPlayedAt    DateTime? @db.Timestamptz
  createdAt       DateTime  @default(now()) @db.Timestamptz
  updatedAt       DateTime  @default(now()) @db.Timestamptz
  user            User      @relation(fields: [userId], references: [id])
  game            Game      @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
  @@index([userId, gameId], name: "idx_user_game")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz

  @@id([identifier, token])
}

model RateLimitRequest {
  id        Int      @id @default(autoincrement())
  ip        String   @db.VarChar(45)
  timestamp DateTime @db.Timestamptz

  @@index([ip, timestamp], name: "idx_rate_limit_requests_ip_timestamp")
}

model RateLimitViolation {
  ip         String @id @db.VarChar(45)
  violations Int
}

model RateLimitBlock {
  ip          String   @id @db.VarChar(45)
  block_until DateTime @db.Timestamptz
}

model UserGameStatus {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Uuid
  gameId    Int
  status    String   @db.VarChar(20)
  progress  String   @db.VarChar(20)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @default(now()) @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id])
  game      Game     @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
  @@index([userId, gameId], name: "idx_user_game_status")
}